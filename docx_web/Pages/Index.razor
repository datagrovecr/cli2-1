@page "/"
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Wordprocessing;
@using DocumentFormat.OpenXml;
@using System.Text;
@using System.IO;
@using Datagrove;
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>

Select your Docx file. File is processed locally and remains private.

<InputFile OnChange="@LoadFiles" multiple accept='.docx' />

<pre> @status</pre>

@code {
    
    private string status = "";

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var buffer = new byte[4096];
            foreach (IBrowserFile file in e.GetMultipleFiles(e.FileCount))
            {   
                String download_name = Path.GetFileNameWithoutExtension(file.Name);
                
                var outstream = new MemoryStream();
                var str =  file.OpenReadStream(maxAllowedSize: long.MaxValue);

                if (file.Name.EndsWith(".md")){
                    status += "\nmd file";
                    download_name += ".docx";
                    var temp = new MemoryStream();
                    var md = "hello, world";
                    using (var reader = new StreamReader(str))
                    {
                        md = await reader.ReadToEndAsync();
                    }
                    //await DgConvert.md_to_docx(md, temp);
                  

                    outstream.Write(temp.ToArray());
                } else {
                    // covert docx file to zip/md.
                    // copy to memory stream for sync access.
                    var fileStream = new MemoryStream();
                    await str.CopyToAsync(fileStream);
                    status += "\ndocx file";
                    //await DgConvert.docx_to_md(fileStream, outstream,download_name+".md");
                    download_name += ".zip";
                }

                //await outstream.WriteAsync(outstream.ToArray());
                if (outstream.Length>0){
                    Console.Write($"{outstream.Length}");
                    outstream.Seek(0,0);
                    using var streamRef = new DotNetStreamReference(stream: outstream);
                        await JS.InvokeVoidAsync("downloadFileFromStream", download_name, streamRef);

                } else {
                    status += "\nConversion failed";
                }
             }
        }
        catch (Exception ex)
        {
            status += "\nError: " + ex.Message;
        }
        //var memoryStream = new MemoryStream();
         _ = InvokeAsync(StateHasChanged);
    }
}